from matplotlib import pyplot as plt
import numpy as np

start=0
stop=100
spacing=30
ylim_down=start
ylim_up=stop-stop%spacing

#scatterplot format=[[]]
def scatterplot(x,color):
    [plt.scatter(k[0], k[1], c=color) for k in x]
    pass

#arrow format=robot point,direction
def direction(pos,dir):
    arrow(pos[0], dir)
    #update mqtt to move in certain direction
    pass

#just for gui arrow markings
def arrow(current_point,direction):
    mag1=current_point[0]-5
    mag2=current_point[1]-5

    if direction=='fwd':
        X,Y=-current_point[0],-mag2
    elif direction=='rev':
        X,Y=-current_point[0],-current_point[1]-5
    elif direction=='left':
        X,Y=-current_point[0]-5,-current_point[1]
    elif direction=='right':
        X,Y=-mag1,-current_point[1]
    plt.arrow(current_point[0], current_point[1],current_point[0]+X, current_point[1]+Y,edgecolor='k',width=0.5,head_width=5)
    pass

def plot_line(pt1,pt2,color='r'):
    plt.plot([pt1[0], pt2[0]], [pt1[1], pt2[1]],color)
    pass

#generate nodes
x=[[j,i] for j in range(start,stop,spacing) for i in range(start,stop,spacing)]

#generate Ids
marker_ref={}
for ids,i in enumerate(x,1):
    marker_ref[ids]=i
print marker_ref
scatterplot(x,color='r')

class warehouse:
    def routecalc(self):pass

    def followme(self,current_pos, target_pos):
        self.current_pos=current_pos[0]
        self.target_pos=target_pos[0]
        median = stop / 2

        ####################################################################################
        if self.current_pos[1] in [ylim_down , ylim_up]:
            pass
        else:
            self.bot = self.current_pos[:]
            self.route = []
            self.route_id = []
            if self.target_pos[1]<self.current_pos[1]:

                self.dir='rev'
                self.coeff=-1
                self.x_reach = [self.current_pos[0], ylim_down]
            else:
                self.dir='fwd'
                self.coeff=1
                self.x_reach=[self.current_pos[0],ylim_up]
            self.xnodes = abs((self.x_reach[1] - self.current_pos[1]) / spacing)

            while self.xnodes > 0:
                self.bot[1] += self.coeff*30
                self.route.append(self.bot[:])
                self.xnodes -=1

            for r in self.route:
                [self.route_id.append(key) for key, val in marker_ref.iteritems() if val == r]
            print self.route_id

            for kx in self.route_id:
                while 1:
                    print kx
                    self.flag = input('give')
                    if self.flag == kx:
                        self.current_pos[1] = self.current_pos[1] + self.coeff*spacing
                        direction([self.current_pos], self.dir)
                        scatterplot([self.current_pos], 'b')
                        break
        print '------------x_ref reached-------------'
        print 'im at',self.current_pos

        #############################################################################
        if self.current_pos[0]==self.target_pos[0]:
            pass
        else:

            if self.target_pos[0] < self.current_pos[0]:

                self.dir = 'left'
                self.coeff = -1
            else:
                self.dir = 'right'
                self.coeff = 1
            self.y_reach = [self.target_pos[0], self.current_pos[1]]
            self.ynodes = abs((self.y_reach[0] - self.current_pos[0]) / spacing)

            self.bot = self.current_pos[:]
            self.route = []
            self.route_id = []

            while self.ynodes > 0:
                self.bot[0] += self.coeff * 30
                self.route.append(self.bot[:])
                self.ynodes -= 1

            for r in self.route:
                [self.route_id.append(key) for key, val in marker_ref.iteritems() if val == r]
            print self.route_id

            for kx in self.route_id:
                while 1:
                    print kx
                    self.flag = input('give')
                    if self.flag == kx:
                        self.current_pos[0] = self.current_pos[0] + self.coeff * spacing
                        direction([self.current_pos], self.dir)
                        scatterplot([self.current_pos], 'b')
                        break

        print '-----------y_ref reached------------'
        print 'im at', self.current_pos

        ###################################################################################
        if self.current_pos[1]==self.target_pos[1]:
            pass
        else:
            self.bot = self.current_pos[:]
            self.route = []
            self.route_id = []
            if self.target_pos[1]<self.current_pos[1]:

                self.dir='rev'
                self.coeff=-1
            else:
                self.dir='fwd'
                self.coeff=1
            self.x_reach=[self.current_pos[0],self.target_pos[1]]
            self.xnodes1 = abs((self.x_reach[1] - self.current_pos[1]) / spacing)

            while self.xnodes1 > 0:
                self.bot[1] += self.coeff*30
                self.route.append(self.bot[:])
                self.xnodes1 -=1

            for r in self.route:
                [self.route_id.append(key) for key, val in marker_ref.iteritems() if val == r]
            print self.route_id

            for kx in self.route_id:
                while 1:
                    print kx
                    self.flag = input('give')
                    if self.flag == kx:
                        self.current_pos[1] = self.current_pos[1] + self.coeff*spacing
                        direction([self.current_pos], self.dir)
                        scatterplot([self.current_pos], 'b')
                        break
            print 'im at', self.current_pos
            print '--------------Pos reached--------------'
        #############################################################################################
        print '-----------------destination reached---------------------'
a=warehouse()
a.followme([[0,30]],[[60,0]])
plt.show()